#!/usr/bin/env python3
"""
Script de test pour OpiozenMusic
V√©rifie les d√©pendances et les fonctionnalit√©s de base
"""

import sys
import subprocess
import os

def test_imports():
    """Tester les imports des d√©pendances"""
    print("üß™ Test des imports...")
    
    tests = [
        ("discord", "Discord.py"),
        ("yt_dlp", "yt-dlp"),
        ("dotenv", "python-dotenv"),
        ("requests", "requests"),
        ("spotipy", "spotipy (optionnel)")
    ]
    
    success = True
    for module, name in tests:
        try:
            __import__(module)
            print(f"‚úÖ {name}")
        except ImportError as e:
            print(f"‚ùå {name}: {e}")
            if module != "spotipy":  # Spotipy est optionnel
                success = True
    
    return success

def test_ytdlp():
    """Tester yt-dlp avec une recherche simple"""
    print("\nüéµ Test de yt-dlp...")
    
    try:
        import yt_dlp
        
        options = {
            'quiet': True,
            'no_warnings': True,
            'extract_flat': True,
            'format': 'best',
        }
        
        with yt_dlp.YoutubeDL(options) as ydl:
            result = ydl.extract_info('ytsearch1:test', download=False)
            if result and 'entries' in result and result['entries']:
                print("‚úÖ yt-dlp fonctionne correctement")
                return True
            else:
                print("‚ö†Ô∏è yt-dlp: aucun r√©sultat trouv√©")
                return False
                
    except Exception as e:
        print(f"‚ùå yt-dlp: {e}")
        return False

def test_ffmpeg():
    """Tester FFmpeg"""
    print("\nüîä Test de FFmpeg...")
    
    try:
        result = subprocess.run(['ffmpeg', '-version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            version_line = result.stdout.split('\n')[0]
            print(f"‚úÖ FFmpeg: {version_line}")
            return True
        else:
            print("‚ùå FFmpeg non trouv√©")
            return False
    except FileNotFoundError:
        print("‚ùå FFmpeg non install√©")
        return False
    except subprocess.TimeoutExpired:
        print("‚è±Ô∏è FFmpeg timeout")
        return False

def test_env_file():
    """Tester le fichier .env"""
    print("\n‚öôÔ∏è Test du fichier .env...")
    
    if not os.path.exists('.env'):
        print("‚ö†Ô∏è Fichier .env non trouv√©")
        print("üí° Copiez .env.example vers .env et configurez votre token Discord")
        return False
    
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        token = os.getenv('DISCORD_TOKEN')
        if not token or token == 'YOUR_BOT_TOKEN_HERE':
            print("‚ö†Ô∏è Token Discord non configur√©")
            print("üí° Modifiez DISCORD_TOKEN dans le fichier .env")
            return False
        else:
            print("‚úÖ Token Discord configur√©")
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur .env: {e}")
        return False

def test_spotify():
    """Tester la configuration Spotify (optionnel)"""
    print("\nüé∂ Test de Spotify (optionnel)...")
    
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        client_id = os.getenv('SPOTIFY_CLIENT_ID')
        client_secret = os.getenv('SPOTIFY_CLIENT_SECRET')
        
        if not client_id or not client_secret:
            print("‚ö†Ô∏è Spotify non configur√© (optionnel)")
            print("üí° Ajoutez SPOTIFY_CLIENT_ID et SPOTIFY_CLIENT_SECRET pour le support Spotify")
            return True  # Ce n'est pas critique
        
        import spotipy
        from spotipy.oauth2 import SpotifyClientCredentials
        
        client_credentials_manager = SpotifyClientCredentials(
            client_id=client_id, client_secret=client_secret
        )
        sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)
        
        # Test avec une piste populaire
        results = sp.search(q='test', type='track', limit=1)
        if results['tracks']['items']:
            print("‚úÖ Spotify configur√© et fonctionnel")
            return True
        else:
            print("‚ö†Ô∏è Spotify: aucun r√©sultat de test")
            return True
            
    except Exception as e:
        print(f"‚ö†Ô∏è Spotify: {e}")
        return True  # Non critique

def main():
    """Fonction principale de test"""
    print("üöÄ Tests OpiozenMusic Bot")
    print("=" * 40)
    
    results = []
    
    # Tests des composants
    results.append(("Imports", test_imports()))
    results.append(("yt-dlp", test_ytdlp()))
    results.append(("FFmpeg", test_ffmpeg()))
    results.append(("Configuration", test_env_file()))
    results.append(("Spotify", test_spotify()))
    
    # R√©sum√©
    print("\n" + "=" * 40)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 40)
    
    critical_failed = False
    for name, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{name:15} {status}")
        
        if not success and name in ['Imports', 'yt-dlp', 'FFmpeg', 'Configuration']:
            critical_failed = True
    
    print("\n" + "=" * 40)
    
    if critical_failed:
        print("‚ùå TESTS √âCHOU√âS - Le bot ne peut pas d√©marrer")
        print("\nüí° Actions recommand√©es:")
        print("1. Installez les d√©pendances: pip install -r requirements.txt")
        print("2. Installez FFmpeg: sudo apt install ffmpeg")
        print("3. Configurez le token Discord dans .env")
        return False
    else:
        print("‚úÖ TOUS LES TESTS PASS√âS - Le bot est pr√™t!")
        print("\nüöÄ Pour d√©marrer le bot:")
        print("python3 music_bot.py")
        return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
